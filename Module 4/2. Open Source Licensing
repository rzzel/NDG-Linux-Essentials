# Software Components: Ownership, Money Transfer, Licensing

## Ownership
- **Definition:** Refers to the intellectual property ownership behind the software.
- **Ownership in Practice:**
  - **Microsoft Windows:** Owned by Microsoft Corporation.
  - **Linux:** Owned by Linus Torvalds.

## Money Transfer
- **Definition:** The method by which money changes hands in acquiring the software.
- **Money Transfer Models:**
  - **Microsoft Windows:** Traditional purchase model, users pay for a license.
  - **Linux:** Typically free to obtain; costs may be associated with support services.

## Licensing
- **Definition:** Specifies user rights, usage permissions, and restrictions.
- **Licensing Models:**
  - **Microsoft Windows:**
    - Proprietary End User License Agreement (EULA).
    - Users get a license to use the software, not ownership.
    - Limited installations and restrictions on reverse engineering.
  - **Linux:**
    - GNU General Public License version 2 (GPLv2).
    - Source code availability to anyone.
    - Users can modify and redistribute under the same license.
    - Prohibits charging for source code distribution beyond actual costs.

## Contrasting Examples
1. **Microsoft Windows:**
   - **Ownership:** Microsoft Corporation owns intellectual property.
   - **Money Transfer:** Traditional purchase model.
   - **Licensing:** EULA, limited installations, no reverse engineering.

2. **Linux:**
   - **Ownership:** Linus Torvalds owns Linux.
   - **Money Transfer:** Typically free; costs may relate to support.
   - **Licensing:** GPLv2, source code availability, freedom to modify and redistribute.

## Free and Open Source Software (FOSS)
- **Definition:** Software where creators give up the right to control its use and distribution.
- **Example:** Linux under GPLv2; users can view and redistribute the source code.
- **Political Aspect:** Software licensing is a political issue, reflecting various views.
- **Diversity of Licenses:**
  - MIT, University of California, Apache Foundation, and Free Software Foundation have unique licenses.

## Conclusion
- **Software Licensing Complexity:** Diverse opinions lead to various licenses.
- **Existing Licenses:** Organizations often choose existing licenses to align with specific views.
- **FOSS Ideology:** FOSS reflects a paradigm shift where creators relinquish control for broader access and collaboration.
