Input/Output (I/O) redirection is a fundamental concept in the Linux command line that allows you to control where command input and output are directed. As you mentioned, there are three standard streams: STDIN, STDOUT, and STDERR. Let's explore how I/O redirection works using these streams:

STDIN (Standard Input):

STDIN is typically associated with keyboard input. When a command expects user input, it reads from STDIN, allowing you to enter data via the keyboard.
I/O redirection can be used to change the source of input from the keyboard to a file. This is done using the < symbol. For example:

command < input.txt

In this case, the command reads its input from the file input.txt instead of the keyboard.
STDOUT (Standard Output):

STDOUT is the normal output of commands. By default, it is displayed in the terminal where the command is running.
I/O redirection can be used to capture and save the output of a command to a file. This is done using the > symbol. For example:

command > output.txt

In this case, the output of command is saved to the file output.txt instead of being displayed in the terminal.
STDERR (Standard Error):

STDERR is used for error messages generated by commands. Like STDOUT, it is also displayed in the terminal by default.
I/O redirection can be used to capture and save error messages to a file. This is done using 2> to specify STDERR. For example:

command 2> error.txt

In this case, error messages produced by command are saved to the file error.txt.
Combining STDOUT and STDERR:

It is also possible to combine both STDOUT and STDERR and redirect them to a file. This is done using 2>&1 to redirect STDERR to the same location as STDOUT. For example:

command > output.txt 2>&1

In this case, both regular output and error messages are saved to output.txt.
Appending to Files:

If you want to append output or error messages to an existing file rather than overwriting it, you can use >> instead of >. For example:

command >> output.txt

I/O redirection is a powerful feature that allows you to process and store command output in files, making it a valuable tool for automation, scripting, and log management. It provides greater control over how command output is handled.
